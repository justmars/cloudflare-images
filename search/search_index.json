{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cloudflare Images","text":"<p>Cloudflare Images is a Paid Service</p> <p>Pricing:</p> <ul> <li>$5 per month per 100k images stored</li> <li>$1 per month per 100k images delivered</li> </ul>"},{"location":"#api-v1","title":"API v1","text":"<p>         Bases: <code>BaseSettings</code></p> <p>Need to setup a Cloudflare Images account to use. See Cloudflare Images docs. With required variables secured:</p> Field in .env Cloudflare API Credential Where credential found <code>CF_IMG_ACCT</code> Account ID <code>https://dash.cloudflare.com/&lt;acct_id&gt;/images/images</code> <code>CF_IMG_HASH</code> Account Hash <code>https://dash.cloudflare.com/&lt;acct_id&gt;/images/images</code> <code>CF_IMG_TOKEN</code> API Secret Generate / save via <code>https://dash.cloudflare.com/&lt;acct_id&gt;/profile/api-tokens</code> <p>Add secrets to .env file and use as follows:</p> <p>Examples:</p> Example Usage<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; import io\n&gt;&gt;&gt; cf = CloudflareImagesAPIv1() # will error out since missing key values\nTraceback (most recent call last):\npydantic.error_wrappers.ValidationError: 3 validation errors for CloudflareImagesAPIv1\nacct_id\nfield required (type=value_error.missing)\ncf_img_hash\nfield required (type=value_error.missing)\napi_token\nfield required (type=value_error.missing)\n&gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ABC\"\n&gt;&gt;&gt; cf = CloudflareImagesAPIv1() # will error out since still missing other values\nTraceback (most recent call last):\npydantic.error_wrappers.ValidationError: 2 validation errors for CloudflareImagesAPIv1\ncf_img_hash\nfield required (type=value_error.missing)\napi_token\nfield required (type=value_error.missing)\n&gt;&gt;&gt; # we'll add all the values needed\n&gt;&gt;&gt; os.environ['CF_IMG_HASH'], os.environ['CF_IMG_TOKEN'] = \"DEF\", \"XYZ\"\n&gt;&gt;&gt; cf = CloudflareImagesAPIv1() # no longer errors out\n&gt;&gt;&gt; cf.headers\n{'Authorization': 'Bearer XYZ'}\n&gt;&gt;&gt; cf.base_api\n'https://api.cloudflare.com/client/v4/accounts/ABC/images/v1'\n&gt;&gt;&gt; cf.base_delivery\n'https://imagedelivery.net/DEF'\n&gt;&gt;&gt; cf.url('hi-bob', 'w=400,sharpen=3')\n'https://imagedelivery.net/DEF/hi-bob/w=400,sharpen=3'\n&gt;&gt;&gt; p = Path().cwd() / \"img\" / \"screenshot.png\"\n&gt;&gt;&gt; p.exists() # Sample image found in `/img/screenshot.png`\nTrue\n&gt;&gt;&gt; img = io.BytesIO(p.read_bytes())\n&gt;&gt;&gt; type(img)\n&lt;class '_io.BytesIO'&gt;\n&gt;&gt;&gt; # Can now use img in `cf.post('sample_id', img)`\n</code></pre> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>class CloudflareImagesAPIv1(BaseSettings):\n\"\"\"\n    Need to setup a Cloudflare Images account to use. See Cloudflare Images [docs](https://developers.cloudflare.com/images/cloudflare-images/).\n    With required variables secured:\n    Field in .env | Cloudflare API Credential | Where credential found\n    :--|:--:|:--\n    `CF_IMG_ACCT` | Account ID |  `https://dash.cloudflare.com/&lt;acct_id&gt;/images/images`\n    `CF_IMG_HASH` | Account Hash | `https://dash.cloudflare.com/&lt;acct_id&gt;/images/images`\n    `CF_IMG_TOKEN` | API Secret | Generate / save via `https://dash.cloudflare.com/&lt;acct_id&gt;/profile/api-tokens`\n    Add secrets to .env file and use as follows:\n    Examples:\n    ```py title=\"Example Usage\" linenums=\"1\" hl_lines=\"4 14 23\"\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; import io\n    &gt;&gt;&gt; cf = CloudflareImagesAPIv1() # will error out since missing key values\n    Traceback (most recent call last):\n    pydantic.error_wrappers.ValidationError: 3 validation errors for CloudflareImagesAPIv1\n    acct_id\n      field required (type=value_error.missing)\n    cf_img_hash\n      field required (type=value_error.missing)\n    api_token\n      field required (type=value_error.missing)\n    &gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ABC\"\n    &gt;&gt;&gt; cf = CloudflareImagesAPIv1() # will error out since still missing other values\n    Traceback (most recent call last):\n    pydantic.error_wrappers.ValidationError: 2 validation errors for CloudflareImagesAPIv1\n    cf_img_hash\n      field required (type=value_error.missing)\n    api_token\n      field required (type=value_error.missing)\n    &gt;&gt;&gt; # we'll add all the values needed\n    &gt;&gt;&gt; os.environ['CF_IMG_HASH'], os.environ['CF_IMG_TOKEN'] = \"DEF\", \"XYZ\"\n    &gt;&gt;&gt; cf = CloudflareImagesAPIv1() # no longer errors out\n    &gt;&gt;&gt; cf.headers\n    {'Authorization': 'Bearer XYZ'}\n    &gt;&gt;&gt; cf.base_api\n    'https://api.cloudflare.com/client/v4/accounts/ABC/images/v1'\n    &gt;&gt;&gt; cf.base_delivery\n    'https://imagedelivery.net/DEF'\n    &gt;&gt;&gt; cf.url('hi-bob', 'w=400,sharpen=3')\n    'https://imagedelivery.net/DEF/hi-bob/w=400,sharpen=3'\n    &gt;&gt;&gt; p = Path().cwd() / \"img\" / \"screenshot.png\"\n    &gt;&gt;&gt; p.exists() # Sample image found in `/img/screenshot.png`\n    True\n    &gt;&gt;&gt; img = io.BytesIO(p.read_bytes())\n    &gt;&gt;&gt; type(img)\n    &lt;class '_io.BytesIO'&gt;\n    &gt;&gt;&gt; # Can now use img in `cf.post('sample_id', img)`\n    ```\n    \"\"\"  # noqa: E501\nacct_id: str = Field(\ndefault=...,\nrepr=False,\ntitle=\"Cloudflare Account ID\",\ndescription=\"Used in other Cloudflare services like R2, etc.\",\nenv=\"CF_ACCT_ID\",\n)\ncf_img_hash: str = Field(\ndefault=...,\nrepr=False,\ntitle=\"Cloudflare Image Hash\",\ndescription=\"Assigned when you create a Cloudflare Images account\",\nenv=\"CF_IMG_HASH\",\n)\napi_token: str = Field(\ndefault=...,\nrepr=False,\ntitle=\"Cloudflare Image API Token\",\ndescription=\"Secure token to perform API operations\",\nenv=\"CF_IMG_TOKEN\",\n)\nclient_api_ver: str = Field(\ndefault=\"v4\",\ntitle=\"Cloudflare Client API Version\",\ndescription=\"Used in the middle of the URL in API requests.\",\nenv=\"CLOUDFLARE_CLIENT_API_VERSION\",\n)\nimages_api_ver: str = Field(\ndefault=\"v1\",\ntitle=\"Cloudflare Images API Version\",\ndescription=\"Used at the end of URL in API requests.\",\nenv=\"CLOUDFLARE_IMAGES_API_VERSION\",\n)\ntimeout: int = Field(\ndefault=60,\nenv=\"CF_IMG_TOKEN_TIMEOUT\",\n)\nclass Config:\nenv_file = \".env\"\nenv_file_encoding = \"utf-8\"\n@property\ndef headers(self) -&gt; dict:\nreturn {\"Authorization\": f\"Bearer {self.api_token}\"}\n@property\ndef client(self):\nreturn httpx.Client(timeout=self.timeout)\n@property\ndef base_api(self):\n\"\"\"Construct URL based on Cloudflare API [format](https://developers.cloudflare.com/images/cloudflare-images/api-request/)\"\"\"  # noqa: E501\nclient = f\"client/{self.client_api_ver}\"\naccount = f\"accounts/{self.acct_id}\"\nimages = f\"images/{self.images_api_ver}\"\nreturn \"/\".join([CF_API_URL, client, account, images])\n@property\ndef base_delivery(self):\n\"\"\"The images are served with the following format:\n        `https://imagedelivery.net/&lt;ACCOUNT_HASH&gt;/&lt;IMAGE_ID&gt;/&lt;VARIANT_NAME&gt;`\n        This property constructs the first part:\n        `https://imagedelivery.net/&lt;ACCOUNT_HASH&gt;`\n        See Cloudflare [docs](https://developers.cloudflare.com/images/cloudflare-images/serve-images/).\n        \"\"\"  # noqa: E501\nreturn \"/\".join([CF_DELIVER, self.cf_img_hash])\ndef url(self, img_id: str, variant: str = \"public\"):\n\"\"\"Generates url based on the Cloudflare hash of the account. The `variant` is based on\n        how these are customized on Cloudflare Images. See also flexible variant [docs](https://developers.cloudflare.com/images/cloudflare-images/transform/flexible-variants/)\n        \"\"\"  # noqa: E501\nreturn \"/\".join([self.base_delivery, img_id, variant])\ndef get(self, img_id: str, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx GET request to the image found in storage. Assuming request like\n        `CFImage().get('target-img-id')`, returns a response with metadata:\n        Examples:\n            ```py title=\"Response object from Cloudflare Images\"\n            &gt;&gt;&gt; # CFImage().get('target-img-id') commented out since hypothetical\n            b'{\n                \"result\": {\n                    \"id\": \"target-img-id\",\n                    \"filename\": \"target-img-id\",\n                    \"uploaded\": \"2023-02-20T09:09:41.755Z\",\n                    \"requireSignedURLs\": false,\n                    \"variants\": [\n                        \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/public\",\n                        \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/cover\",\n                        \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/avatar\",\n                        \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/uniform\"\n                    ]\n                },\n                \"success\": true,\n                \"errors\": [],\n                \"messages\": []\n            }'\n            ```\n        \"\"\"\nreturn self.client.get(\nurl=f\"{self.base_api}/{img_id}\",\nheaders=self.headers,\n*args,\n**kwargs,\n)\ndef delete(self, img_id: str, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx [DELETE](https://developers.cloudflare.com/images/cloudflare-images/transform/delete-images/) request to the image.\"\"\"  # noqa: E501\nreturn self.client.delete(\nurl=f\"{self.base_api}/{img_id}\",\nheaders=self.headers,\n*args,\n**kwargs,\n)\ndef post(self, img_id: str, img: bytes, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx [POST](https://developers.cloudflare.com/images/cloudflare-images/upload-images/upload-via-url/) request to upload image.\"\"\"  # noqa: E501\nreturn self.client.post(\nurl=self.base_api,\nheaders=self.headers,\ndata={\"id\": img_id},\nfiles={\"file\": (img_id, img)},\n*args,\n**kwargs,\n)\ndef upsert(self, img_id: str, img: bytes) -&gt; httpx.Response:\n\"\"\"Ensures a unique id name by first deleting the `img_id` from storage and then\n        uploading the `img`.\"\"\"\nself.delete(img_id)\nreturn self.post(img_id, img)\n</code></pre>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1-attributes","title":"Attributes","text":""},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.base_api","title":"<code>base_api</code>  <code>property</code>","text":"<p>Construct URL based on Cloudflare API format</p>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.base_delivery","title":"<code>base_delivery</code>  <code>property</code>","text":"<p>The images are served with the following format:</p> <p><code>https://imagedelivery.net/&lt;ACCOUNT_HASH&gt;/&lt;IMAGE_ID&gt;/&lt;VARIANT_NAME&gt;</code></p> <p>This property constructs the first part:</p> <p><code>https://imagedelivery.net/&lt;ACCOUNT_HASH&gt;</code></p> <p>See Cloudflare docs.</p>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1-functions","title":"Functions","text":""},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.delete","title":"<code>delete(img_id, *args, **kwargs)</code>","text":"<p>Issue httpx DELETE request to the image.</p> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>def delete(self, img_id: str, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx [DELETE](https://developers.cloudflare.com/images/cloudflare-images/transform/delete-images/) request to the image.\"\"\"  # noqa: E501\nreturn self.client.delete(\nurl=f\"{self.base_api}/{img_id}\",\nheaders=self.headers,\n*args,\n**kwargs,\n)\n</code></pre>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.get","title":"<code>get(img_id, *args, **kwargs)</code>","text":"<p>Issue httpx GET request to the image found in storage. Assuming request like <code>CFImage().get('target-img-id')</code>, returns a response with metadata:</p> <p>Examples:</p> Response object from Cloudflare Images<pre><code>&gt;&gt;&gt; # CFImage().get('target-img-id') commented out since hypothetical\nb'{\n\"result\": {\n\"id\": \"target-img-id\",\n\"filename\": \"target-img-id\",\n\"uploaded\": \"2023-02-20T09:09:41.755Z\",\n\"requireSignedURLs\": false,\n\"variants\": [\n\"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/public\",\n\"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/cover\",\n\"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/avatar\",\n\"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/uniform\"\n]\n},\n\"success\": true,\n\"errors\": [],\n\"messages\": []\n}'\n</code></pre> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>def get(self, img_id: str, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx GET request to the image found in storage. Assuming request like\n    `CFImage().get('target-img-id')`, returns a response with metadata:\n    Examples:\n        ```py title=\"Response object from Cloudflare Images\"\n        &gt;&gt;&gt; # CFImage().get('target-img-id') commented out since hypothetical\n        b'{\n            \"result\": {\n                \"id\": \"target-img-id\",\n                \"filename\": \"target-img-id\",\n                \"uploaded\": \"2023-02-20T09:09:41.755Z\",\n                \"requireSignedURLs\": false,\n                \"variants\": [\n                    \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/public\",\n                    \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/cover\",\n                    \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/avatar\",\n                    \"https://imagedelivery.net/&lt;hash&gt;/&lt;target-img-id&gt;/uniform\"\n                ]\n            },\n            \"success\": true,\n            \"errors\": [],\n            \"messages\": []\n        }'\n        ```\n    \"\"\"\nreturn self.client.get(\nurl=f\"{self.base_api}/{img_id}\",\nheaders=self.headers,\n*args,\n**kwargs,\n)\n</code></pre>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.post","title":"<code>post(img_id, img, *args, **kwargs)</code>","text":"<p>Issue httpx POST request to upload image.</p> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>def post(self, img_id: str, img: bytes, *args, **kwargs) -&gt; httpx.Response:\n\"\"\"Issue httpx [POST](https://developers.cloudflare.com/images/cloudflare-images/upload-images/upload-via-url/) request to upload image.\"\"\"  # noqa: E501\nreturn self.client.post(\nurl=self.base_api,\nheaders=self.headers,\ndata={\"id\": img_id},\nfiles={\"file\": (img_id, img)},\n*args,\n**kwargs,\n)\n</code></pre>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.upsert","title":"<code>upsert(img_id, img)</code>","text":"<p>Ensures a unique id name by first deleting the <code>img_id</code> from storage and then uploading the <code>img</code>.</p> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>def upsert(self, img_id: str, img: bytes) -&gt; httpx.Response:\n\"\"\"Ensures a unique id name by first deleting the `img_id` from storage and then\n    uploading the `img`.\"\"\"\nself.delete(img_id)\nreturn self.post(img_id, img)\n</code></pre>"},{"location":"#cloudflare_images.api.CloudflareImagesAPIv1.url","title":"<code>url(img_id, variant='public')</code>","text":"<p>Generates url based on the Cloudflare hash of the account. The <code>variant</code> is based on how these are customized on Cloudflare Images. See also flexible variant docs</p> Source code in <code>cloudflare_images/api.py</code> Python<pre><code>def url(self, img_id: str, variant: str = \"public\"):\n\"\"\"Generates url based on the Cloudflare hash of the account. The `variant` is based on\n    how these are customized on Cloudflare Images. See also flexible variant [docs](https://developers.cloudflare.com/images/cloudflare-images/transform/flexible-variants/)\n    \"\"\"  # noqa: E501\nreturn \"/\".join([self.base_delivery, img_id, variant])\n</code></pre>"},{"location":"#django","title":"Django","text":"<p>         Bases: <code>Storage</code></p> <p>Custom Storage Class based on Django docs instructions</p> <p>Starting with Django 4.2, add to <code>STORAGES</code> setting:</p> Django settings.py<pre><code>...\nSTORAGES = {  # django 4.2 and above\n\"default\": {  # default\n\"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n},\n\"staticfiles\": {  # default\n\"BACKEND\": \"django.contrib.staticfiles.storage.StaticFilesStorage\",\n},\n\"cloudflare_images\": {  # add\n\"BACKEND\": \"cloudflare_images.django.ImageStorageCloudflare\",\n},\n}\n</code></pre> <p>Then can refer to this via:</p> Invocation<pre><code>from django.core.files.storage import storages\ncf = storages[\"cloudflare_images\"]\n# assume previous upload done\nid = &lt;image-id-uploaded&gt;\n# get image url, defaults to 'public' variant\ncf.url(id)\n# specified 'avatar' variant, assuming it was created in the Cloudflare Images dashboard / API\ncf.url_variant(id, 'avatar')\n</code></pre> Source code in <code>cloudflare_images/django.py</code> Python<pre><code>@deconstructible\nclass LimitedStorageCloudflareImages(Storage):\n\"\"\"Custom Storage Class based on Django docs [instructions](https://docs.djangoproject.com/en/dev/howto/custom-file-storage/#django.core.files.storage._open)\n    Starting with Django 4.2, add to `STORAGES` setting:\n    ```python title=\"Django settings.py\" linenums=\"1\" hl_lines=\"9 10\"\n    ...\n    STORAGES = {  # django 4.2 and above\n        \"default\": {  # default\n            \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        },\n        \"staticfiles\": {  # default\n            \"BACKEND\": \"django.contrib.staticfiles.storage.StaticFilesStorage\",\n        },\n        \"cloudflare_images\": {  # add\n            \"BACKEND\": \"cloudflare_images.django.ImageStorageCloudflare\",\n        },\n    }\n    ```\n    Then can refer to this via:\n    ```python title=\"Invocation\"\n    from django.core.files.storage import storages\n    cf = storages[\"cloudflare_images\"]\n    # assume previous upload done\n    id = &lt;image-id-uploaded&gt;\n    # get image url, defaults to 'public' variant\n    cf.url(id)\n    # specified 'avatar' variant, assuming it was created in the Cloudflare Images dashboard / API\n    cf.url_variant(id, 'avatar')\n    ```\n    \"\"\"  # noqa: E501\ndef __init__(self):\nsuper().__init__()\nself.api = CloudflareImagesAPIv1()\ndef __repr__(self):\nreturn \"&lt;LimitedToImagesStorageClassCloudflare&gt;\"\ndef _open(self, name: str, mode=\"rb\") -&gt; File:\nreturn File(self.api.get(img_id=name), name=name)\ndef _save(self, name: str, content: bytes) -&gt; str:\ntimestamp = datetime.datetime.now().isoformat()\nres = self.api.post(f\"{name}/{timestamp}\", content)\nreturn self.api.url(img_id=res.json()[\"result\"][\"id\"])\ndef get_valid_name(self, name):\nreturn name\ndef get_available_name(self, name, max_length=None):\nreturn self.generate_filename(name)\ndef generate_filename(self, filename):\nreturn filename\ndef delete(self, name) -&gt; httpx.Response:\nreturn self.api.delete(name)\ndef exists(self, name: str) -&gt; bool:\nres = self.api.get(name)\nif res.status_code == HTTPStatus.NOT_FOUND:\nreturn False\nelif res.status_code == HTTPStatus.OK:\nreturn True\nraise Exception(\"Image name found but http status code is not OK.\")\ndef listdir(self, path):\nraise NotImplementedError(\n\"subclasses of Storage must provide a listdir() method\"\n)\ndef size(self, name: str):\nreturn len(self.api.get(name).content)\ndef url(self, name: str):\nreturn self.api.url(name)\ndef url_variant(self, name: str, variant: str):\nreturn self.api.url(name, variant)\ndef get_accessed_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_accessed_time() method\"\n)\ndef get_created_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_created_time() method\"\n)\ndef get_modified_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_modified_time() method\"\n)\n</code></pre>"}]}